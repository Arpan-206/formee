{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Formee- The terminal forms \u00b6 Formee is a tool that provides an easy way to create, edit and manage all of your forms from the command line. It uses a powerful GraphQL API and strives to make the process of working with forms as easy and simple as possible. Formee Logo Installation \u00b6 Install formee with pip pip3 install formee Use the Github repository git clone https://github.com/Arpan-206/formee.git cd formee If you use poetry, then: poetry install Otherwise, use pip pip3 install -r requirements.txt Usage \u00b6 Install the CLI. Run the command python3 -m formee You're good to go. Project layout \u00b6 This is the project file structure for reference. |-- LICENSE |-- README.md |-- docs | |-- getting-started.md | |-- index.md | |-- installation.md | `-- screenshots.md |-- docs_assets | |-- images | | `-- favicon.ico | |-- javascripts | | `-- config.js | |-- stylesheets | | `-- pdf-export.css | `-- theme | `-- main.html |-- formee | |-- __init__.py | |-- __main__.py | |-- auth | | |-- check.py | | |-- hasher.py | | |-- login.py | | |-- register.py | | |-- user_jwt.py | | |-- validate.py | | |-- visitor_jwt.py | | `-- visitor_settings.py | `-- formTools | |-- create.py | |-- deploy.py | |-- fill.py | |-- read.py | `-- validators.py |-- mkdocs.yml |-- pyproject.toml |-- requirements.txt `-- tests |-- __init__.py `-- test_formee.py License \u00b6 MIT Roadmap \u00b6 Add more type of fields Work on security Work on Auth Improve WebUI Improve runtime Authors \u00b6 @Arpan-206 Feedback \u00b6 If you have any feedback, please reach out to us at arpan@hackersreboot.tech. Contributing \u00b6 Contributions are always welcome! See contributing.md for ways to get started. Please adhere to this project's code of conduct .","title":"Formee- The terminal forms"},{"location":"index.html#formee-the-terminal-forms","text":"Formee is a tool that provides an easy way to create, edit and manage all of your forms from the command line. It uses a powerful GraphQL API and strives to make the process of working with forms as easy and simple as possible. Formee Logo","title":"Formee- The terminal forms"},{"location":"index.html#installation","text":"Install formee with pip pip3 install formee Use the Github repository git clone https://github.com/Arpan-206/formee.git cd formee If you use poetry, then: poetry install Otherwise, use pip pip3 install -r requirements.txt","title":"Installation"},{"location":"index.html#usage","text":"Install the CLI. Run the command python3 -m formee You're good to go.","title":"Usage"},{"location":"index.html#project-layout","text":"This is the project file structure for reference. |-- LICENSE |-- README.md |-- docs | |-- getting-started.md | |-- index.md | |-- installation.md | `-- screenshots.md |-- docs_assets | |-- images | | `-- favicon.ico | |-- javascripts | | `-- config.js | |-- stylesheets | | `-- pdf-export.css | `-- theme | `-- main.html |-- formee | |-- __init__.py | |-- __main__.py | |-- auth | | |-- check.py | | |-- hasher.py | | |-- login.py | | |-- register.py | | |-- user_jwt.py | | |-- validate.py | | |-- visitor_jwt.py | | `-- visitor_settings.py | `-- formTools | |-- create.py | |-- deploy.py | |-- fill.py | |-- read.py | `-- validators.py |-- mkdocs.yml |-- pyproject.toml |-- requirements.txt `-- tests |-- __init__.py `-- test_formee.py","title":"Project layout"},{"location":"index.html#license","text":"MIT","title":"License"},{"location":"index.html#roadmap","text":"Add more type of fields Work on security Work on Auth Improve WebUI Improve runtime","title":"Roadmap"},{"location":"index.html#authors","text":"@Arpan-206","title":"Authors"},{"location":"index.html#feedback","text":"If you have any feedback, please reach out to us at arpan@hackersreboot.tech.","title":"Feedback"},{"location":"index.html#contributing","text":"Contributions are always welcome! See contributing.md for ways to get started. Please adhere to this project's code of conduct .","title":"Contributing"},{"location":"getting-started.html","text":"Getting Started \u00b6 First clone the repository \u00b6 You will need to clone the repository locally. git clone https://github.com/Arpan-206/Web3-CLI.git Then install the required dependencies \u00b6 Then you will need to install the required dependencies. pip3 install -r requirements.txt Run the program \u00b6 Now, you can run the program by just running the main file. python3 main.py","title":"Getting Started"},{"location":"getting-started.html#getting-started","text":"","title":"Getting Started"},{"location":"getting-started.html#first-clone-the-repository","text":"You will need to clone the repository locally. git clone https://github.com/Arpan-206/Web3-CLI.git","title":"First clone the repository"},{"location":"getting-started.html#then-install-the-required-dependencies","text":"Then you will need to install the required dependencies. pip3 install -r requirements.txt","title":"Then install the required dependencies"},{"location":"getting-started.html#run-the-program","text":"Now, you can run the program by just running the main file. python3 main.py","title":"Run the program"},{"location":"installation.html","text":"Installation \u00b6 It is very easy to install dependencies and stuff for this module and run this program. Cloning the repo \u00b6 git clone https://github.com/Arpan-206/Web3-CLI.git Installing the required dependencies \u00b6 pip3 install -r requirements.txt Installing the required dependencies for documentation \u00b6 pip3 install -r docs-requirement.txt The following are the dependencies for this project \u00b6 This program depends on the following dependencies. Huge shoutout to all the maintainers and contributors of these packages. PyInquirer termcolor thirdweb-sdk python-dotenv pyfiglet","title":"Installation"},{"location":"installation.html#installation","text":"It is very easy to install dependencies and stuff for this module and run this program.","title":"Installation"},{"location":"installation.html#cloning-the-repo","text":"git clone https://github.com/Arpan-206/Web3-CLI.git","title":"Cloning the repo"},{"location":"installation.html#installing-the-required-dependencies","text":"pip3 install -r requirements.txt","title":"Installing the required dependencies"},{"location":"installation.html#installing-the-required-dependencies-for-documentation","text":"pip3 install -r docs-requirement.txt","title":"Installing the required dependencies for documentation"},{"location":"installation.html#the-following-are-the-dependencies-for-this-project","text":"This program depends on the following dependencies. Huge shoutout to all the maintainers and contributors of these packages. PyInquirer termcolor thirdweb-sdk python-dotenv pyfiglet","title":"The following are the dependencies for this project"},{"location":"Auth/index.html","text":"Auth Modules \u00b6 These are the modules that manage the authentication and related things for the CLI. These modules handle everything from user registration, login, user validation, visitor handling and JWTs. They are arranged in 8 files: Check.py Login.py Register.py Validate.py User_jwt.py Visitor_jwt.py Visitor_settings.py Hasher.py","title":"Auth Modules"},{"location":"Auth/index.html#auth-modules","text":"These are the modules that manage the authentication and related things for the CLI. These modules handle everything from user registration, login, user validation, visitor handling and JWTs. They are arranged in 8 files: Check.py Login.py Register.py Validate.py User_jwt.py Visitor_jwt.py Visitor_settings.py Hasher.py","title":"Auth Modules"},{"location":"Auth/check.html","text":"Check Login \u00b6 Check Login \u00b6 Returns: Type Description Any Depends on the login status Source code in formee/auth/check.py def check_login () -> Any : \"\"\" Args: None Returns: Any: Depends on the login status \"\"\" if ( os . path . isfile ( DEST_PATH )): login_data = yaml . safe_load ( open ( DEST_PATH , 'r' )) if login_data [ 'visitor' ]: return None return validate_user ( login_data [ 'username' ], login_data [ 'password' ]) return False","title":"Check Login"},{"location":"Auth/check.html#check-login","text":"","title":"Check Login"},{"location":"Auth/check.html#check-login_1","text":"Returns: Type Description Any Depends on the login status Source code in formee/auth/check.py def check_login () -> Any : \"\"\" Args: None Returns: Any: Depends on the login status \"\"\" if ( os . path . isfile ( DEST_PATH )): login_data = yaml . safe_load ( open ( DEST_PATH , 'r' )) if login_data [ 'visitor' ]: return None return validate_user ( login_data [ 'username' ], login_data [ 'password' ]) return False","title":"Check Login"},{"location":"Auth/hasher.html","text":"Hasher \u00b6 Hash Password \u00b6 Parameters: Name Type Description Default password str The password to be hashed required Returns: Type Description str Hashed password Source code in formee/auth/hasher.py def hash_password ( password : str ) -> str : \"\"\" Args: password (str): The password to be hashed Returns: str: Hashed password \"\"\" return hashlib . sha256 ( password . encode ( 'utf-8' )) . hexdigest ()","title":"Hasher"},{"location":"Auth/hasher.html#hasher","text":"","title":"Hasher"},{"location":"Auth/hasher.html#hash-password","text":"Parameters: Name Type Description Default password str The password to be hashed required Returns: Type Description str Hashed password Source code in formee/auth/hasher.py def hash_password ( password : str ) -> str : \"\"\" Args: password (str): The password to be hashed Returns: str: Hashed password \"\"\" return hashlib . sha256 ( password . encode ( 'utf-8' )) . hexdigest ()","title":"Hash Password"},{"location":"Auth/login.html","text":"Login \u00b6 Login \u00b6 Returns: Type Description bool True when login is successful Source code in formee/auth/login.py def login () -> bool : \"\"\" Returns: bool: True when login is successful \"\"\" questions = [ { 'type' : 'input' , 'name' : 'username' , 'message' : 'Enter your username:' , 'validate' : lambda val : val != '' }, { 'type' : 'password' , 'name' : 'password' , 'message' : 'Enter your password:' , 'validate' : lambda val : val != '' , 'filter' : lambda val : hash_password ( val ) }, ] answers = prompt ( questions ) usr_logged_in = validate_user ( answers [ 'username' ], answers [ 'password' ]) if not usr_logged_in : print ( f \"[red]User { answers [ 'username' ] } not logged in. Try new username.\" ) login () else : yaml . dump ({ 'username' : answers [ 'username' ], 'password' : answers [ 'password' ], 'visitor' : False }, open ( DEST_PATH , 'w' )) print ( f \"[green]User { answers [ 'username' ] } logged in successfully.\" ) return True","title":"Login"},{"location":"Auth/login.html#login","text":"","title":"Login"},{"location":"Auth/login.html#login_1","text":"Returns: Type Description bool True when login is successful Source code in formee/auth/login.py def login () -> bool : \"\"\" Returns: bool: True when login is successful \"\"\" questions = [ { 'type' : 'input' , 'name' : 'username' , 'message' : 'Enter your username:' , 'validate' : lambda val : val != '' }, { 'type' : 'password' , 'name' : 'password' , 'message' : 'Enter your password:' , 'validate' : lambda val : val != '' , 'filter' : lambda val : hash_password ( val ) }, ] answers = prompt ( questions ) usr_logged_in = validate_user ( answers [ 'username' ], answers [ 'password' ]) if not usr_logged_in : print ( f \"[red]User { answers [ 'username' ] } not logged in. Try new username.\" ) login () else : yaml . dump ({ 'username' : answers [ 'username' ], 'password' : answers [ 'password' ], 'visitor' : False }, open ( DEST_PATH , 'w' )) print ( f \"[green]User { answers [ 'username' ] } logged in successfully.\" ) return True","title":"Login"},{"location":"Auth/register.html","text":"Register \u00b6 Register \u00b6 Parameters: Name Type Description Default username str Username of the user to be registered required password str Password of the user to be registered required Returns: Type Description bool True when registration is successful Source code in formee/auth/register.py def register ( username : str , password : str ) -> bool : \"\"\" Args: username (str): Username of the user to be registered password (str): Password of the user to be registered Returns: bool: True when registration is successful \"\"\" url = 'https://hrbt-portal.hasura.app/api/rest/createUser' headers = { 'Content-Type' : 'application/json' , 'Authorization' : 'Bearer ' + get_visitor_jwt ()} body = { 'username' : username , 'password' : password } response = requests . post ( url , headers = headers , json = body ) if response . status_code == 200 : yaml . dump ({ 'username' : username , 'password' : password , 'visitor' : False }, open ( DEST_PATH , 'w' )) return response . status_code == 200 Register Prompt \u00b6 Source code in formee/auth/register.py def registerPrompt () -> None : \"\"\" \"\"\" questions = [ { 'type' : 'input' , 'name' : 'username' , 'message' : 'Enter your username:' , 'validate' : lambda val : val != '' }, { 'type' : 'password' , 'name' : 'password' , 'message' : 'Enter your password:' , 'validate' : lambda val : val != '' , 'filter' : lambda val : hash_password ( val ) }, ] answers = prompt ( questions ) usr_registered = register ( answers [ 'username' ], answers [ 'password' ]) if usr_registered : print ( f \"[green]User { answers [ 'username' ] } registered successfully.\" ) else : print ( f \"[red]User { answers [ 'username' ] } not registered. Try new username.\" ) registerPrompt ()","title":"Register"},{"location":"Auth/register.html#register","text":"","title":"Register"},{"location":"Auth/register.html#register_1","text":"Parameters: Name Type Description Default username str Username of the user to be registered required password str Password of the user to be registered required Returns: Type Description bool True when registration is successful Source code in formee/auth/register.py def register ( username : str , password : str ) -> bool : \"\"\" Args: username (str): Username of the user to be registered password (str): Password of the user to be registered Returns: bool: True when registration is successful \"\"\" url = 'https://hrbt-portal.hasura.app/api/rest/createUser' headers = { 'Content-Type' : 'application/json' , 'Authorization' : 'Bearer ' + get_visitor_jwt ()} body = { 'username' : username , 'password' : password } response = requests . post ( url , headers = headers , json = body ) if response . status_code == 200 : yaml . dump ({ 'username' : username , 'password' : password , 'visitor' : False }, open ( DEST_PATH , 'w' )) return response . status_code == 200","title":"Register"},{"location":"Auth/register.html#register-prompt","text":"Source code in formee/auth/register.py def registerPrompt () -> None : \"\"\" \"\"\" questions = [ { 'type' : 'input' , 'name' : 'username' , 'message' : 'Enter your username:' , 'validate' : lambda val : val != '' }, { 'type' : 'password' , 'name' : 'password' , 'message' : 'Enter your password:' , 'validate' : lambda val : val != '' , 'filter' : lambda val : hash_password ( val ) }, ] answers = prompt ( questions ) usr_registered = register ( answers [ 'username' ], answers [ 'password' ]) if usr_registered : print ( f \"[green]User { answers [ 'username' ] } registered successfully.\" ) else : print ( f \"[red]User { answers [ 'username' ] } not registered. Try new username.\" ) registerPrompt ()","title":"Register Prompt"},{"location":"Auth/user_jwt.html","text":"User's JWT \u00b6 Get User JWT \u00b6 Returns: Type Description str The JWT token of the user Source code in formee/auth/user_jwt.py def get_user_jwt () -> str : \"\"\" Returns: str: The JWT token of the user \"\"\" login_data = check_login () if not login_data : token = requests . get ( 'https://formee-auth.hackersreboot.tech/visitor' ) . json ()[ 'token' ] return token if login_data : token = requests . get ( 'https://formee-auth.hackersreboot.tech/' , json = { 'username' : login_data [ 'username' ], 'password' : login_data [ 'password' ]}) . json ()[ 'token' ] return token","title":"User's JWT"},{"location":"Auth/user_jwt.html#users-jwt","text":"","title":"User's JWT"},{"location":"Auth/user_jwt.html#get-user-jwt","text":"Returns: Type Description str The JWT token of the user Source code in formee/auth/user_jwt.py def get_user_jwt () -> str : \"\"\" Returns: str: The JWT token of the user \"\"\" login_data = check_login () if not login_data : token = requests . get ( 'https://formee-auth.hackersreboot.tech/visitor' ) . json ()[ 'token' ] return token if login_data : token = requests . get ( 'https://formee-auth.hackersreboot.tech/' , json = { 'username' : login_data [ 'username' ], 'password' : login_data [ 'password' ]}) . json ()[ 'token' ] return token","title":"Get User JWT"},{"location":"Auth/validate.html","text":"Validate User \u00b6 Validate User \u00b6 Parameters: Name Type Description Default username str Username of the user to be validated required password str Password of the user to be validated required Returns: Type Description Any False when user is not validated, else the user data Source code in formee/auth/validate.py def validate_user ( username : str , password : str ) -> Any : \"\"\" Args: username (str): Username of the user to be validated password (str): Password of the user to be validated Returns: Any: False when user is not validated, else the user data \"\"\" url = 'https://hrbt-portal.hasura.app/api/rest/user/' headers = { 'Content-Type' : 'application/json' , 'Authorization' : 'Bearer ' + get_visitor_jwt ()} body = { 'username' : username , 'password' : password } response = requests . get ( url , headers = headers , json = body ) . json () if len ( response [ 'User' ]) == 0 : return False return response [ 'User' ][ 0 ]","title":"Validate User"},{"location":"Auth/validate.html#validate-user","text":"","title":"Validate User"},{"location":"Auth/validate.html#validate-user_1","text":"Parameters: Name Type Description Default username str Username of the user to be validated required password str Password of the user to be validated required Returns: Type Description Any False when user is not validated, else the user data Source code in formee/auth/validate.py def validate_user ( username : str , password : str ) -> Any : \"\"\" Args: username (str): Username of the user to be validated password (str): Password of the user to be validated Returns: Any: False when user is not validated, else the user data \"\"\" url = 'https://hrbt-portal.hasura.app/api/rest/user/' headers = { 'Content-Type' : 'application/json' , 'Authorization' : 'Bearer ' + get_visitor_jwt ()} body = { 'username' : username , 'password' : password } response = requests . get ( url , headers = headers , json = body ) . json () if len ( response [ 'User' ]) == 0 : return False return response [ 'User' ][ 0 ]","title":"Validate User"},{"location":"Auth/visitor_jwt.html","text":"A visitor JWT \u00b6 Get Visitor JWT \u00b6 Returns: Type Description str The JWT token for a visitor Source code in formee/auth/visitor_jwt.py def get_visitor_jwt () -> str : \"\"\" Returns: str: The JWT token for a visitor \"\"\" token = requests . get ( 'https://formee-auth.hackersreboot.tech/visitor' ) . json ()[ 'token' ] return token","title":"A visitor JWT"},{"location":"Auth/visitor_jwt.html#a-visitor-jwt","text":"","title":"A visitor JWT"},{"location":"Auth/visitor_jwt.html#get-visitor-jwt","text":"Returns: Type Description str The JWT token for a visitor Source code in formee/auth/visitor_jwt.py def get_visitor_jwt () -> str : \"\"\" Returns: str: The JWT token for a visitor \"\"\" token = requests . get ( 'https://formee-auth.hackersreboot.tech/visitor' ) . json ()[ 'token' ] return token","title":"Get Visitor JWT"},{"location":"Auth/visitor_settings.html","text":"Load settings for a visitor \u00b6 Load Visitor Settings \u00b6 Source code in formee/auth/visitor_settings.py def load_visitor_settings () -> None : \"\"\" \"\"\" yaml . dump ({ 'visitor' : True }, open ( DEST_PATH , 'w' ))","title":"Load settings for a visitor"},{"location":"Auth/visitor_settings.html#load-settings-for-a-visitor","text":"","title":"Load settings for a visitor"},{"location":"Auth/visitor_settings.html#load-visitor-settings","text":"Source code in formee/auth/visitor_settings.py def load_visitor_settings () -> None : \"\"\" \"\"\" yaml . dump ({ 'visitor' : True }, open ( DEST_PATH , 'w' ))","title":"Load Visitor Settings"},{"location":"FormTools/index.html","text":"Main tools to interact with forms \u00b6 These are the main tools to interact with forms. They handle the creation, deployment, trial and filling of forms. They are arranged in 8 files: Create.py Deploy.py Fill.py Read.py GetResponses.py","title":"Main tools to interact with forms"},{"location":"FormTools/index.html#main-tools-to-interact-with-forms","text":"These are the main tools to interact with forms. They handle the creation, deployment, trial and filling of forms. They are arranged in 8 files: Create.py Deploy.py Fill.py Read.py GetResponses.py","title":"Main tools to interact with forms"},{"location":"FormTools/create.html","text":"Create a form \u00b6 Create Form \u00b6 Source code in formee/formTools/create.py def create_form () -> None : initial_details = prompt ([ { 'type' : 'input' , 'name' : 'name' , 'message' : 'Enter the name of the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 20 }, { 'type' : 'input' , 'name' : 'description' , 'message' : 'Enter the description of the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 1000 } ]) questions = create_questions () form = { 'name' : initial_details [ 'name' ], 'description' : initial_details [ 'description' ], 'gen_detail' : 'formee_beta' , 'questions' : questions } yaml . dump ( form , open ( initial_details [ 'name' ] . lower ( ) . strip () . replace ( ' ' , '-' ) + '.yaml' , 'w' )) print ( f \"[bold]Form created successfully.\" ) Create Questions \u00b6 Returns: Type Description list Questions to be asked in the form Source code in formee/formTools/create.py def create_questions () -> list : \"\"\" Returns: list: Questions to be asked in the form \"\"\" questions = [] question_prompt = [ { 'type' : 'input' , 'name' : 'question' , 'message' : 'Enter the question:' , 'validate' : lambda val : val != '' and len ( val ) <= 100 }, { 'type' : 'list' , 'name' : 'type' , 'message' : 'Enter the type of the question:' , 'choices' : [ 'Text' , 'Number' , 'Confirm' , 'Options' ] }, { 'type' : 'confirm' , 'name' : 'required' , 'message' : 'Is this question required?' , 'default' : True } ] while True : question = prompt ( question_prompt ) if question [ 'type' ] == 'Options' : question [ 'options' ] = prompt ([ { 'type' : 'input' , 'name' : 'options' , 'message' : 'Enter the options [Seperate using *;*]:' , 'validate' : lambda val : val != '' and len ( val ) <= 100 , 'filter' : lambda val : list ( map ( lambda x : x . strip (), val . split ( ';' ))) } ])[ 'options' ] questions . append ( question ) confirmation = prompt ([ { 'type' : 'confirm' , 'name' : 'continue' , 'message' : 'Do you want to add more questions?' } ]) if not confirmation [ 'continue' ]: break return questions","title":"Create a form"},{"location":"FormTools/create.html#create-a-form","text":"","title":"Create a form"},{"location":"FormTools/create.html#create-form","text":"Source code in formee/formTools/create.py def create_form () -> None : initial_details = prompt ([ { 'type' : 'input' , 'name' : 'name' , 'message' : 'Enter the name of the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 20 }, { 'type' : 'input' , 'name' : 'description' , 'message' : 'Enter the description of the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 1000 } ]) questions = create_questions () form = { 'name' : initial_details [ 'name' ], 'description' : initial_details [ 'description' ], 'gen_detail' : 'formee_beta' , 'questions' : questions } yaml . dump ( form , open ( initial_details [ 'name' ] . lower ( ) . strip () . replace ( ' ' , '-' ) + '.yaml' , 'w' )) print ( f \"[bold]Form created successfully.\" )","title":"Create Form"},{"location":"FormTools/create.html#create-questions","text":"Returns: Type Description list Questions to be asked in the form Source code in formee/formTools/create.py def create_questions () -> list : \"\"\" Returns: list: Questions to be asked in the form \"\"\" questions = [] question_prompt = [ { 'type' : 'input' , 'name' : 'question' , 'message' : 'Enter the question:' , 'validate' : lambda val : val != '' and len ( val ) <= 100 }, { 'type' : 'list' , 'name' : 'type' , 'message' : 'Enter the type of the question:' , 'choices' : [ 'Text' , 'Number' , 'Confirm' , 'Options' ] }, { 'type' : 'confirm' , 'name' : 'required' , 'message' : 'Is this question required?' , 'default' : True } ] while True : question = prompt ( question_prompt ) if question [ 'type' ] == 'Options' : question [ 'options' ] = prompt ([ { 'type' : 'input' , 'name' : 'options' , 'message' : 'Enter the options [Seperate using *;*]:' , 'validate' : lambda val : val != '' and len ( val ) <= 100 , 'filter' : lambda val : list ( map ( lambda x : x . strip (), val . split ( ';' ))) } ])[ 'options' ] questions . append ( question ) confirmation = prompt ([ { 'type' : 'confirm' , 'name' : 'continue' , 'message' : 'Do you want to add more questions?' } ]) if not confirmation [ 'continue' ]: break return questions","title":"Create Questions"},{"location":"FormTools/deploy.html","text":"Deploy a form to the server \u00b6 Deploy function \u00b6 Returns: Type Description Any None if unsuccessful, else the form id Source code in formee/formTools/deploy.py def deploy () -> Any : \"\"\" Returns: Any: None if unsuccessful, else the form id \"\"\" form_data = read_form () if form_data is None : print ( \"[red]No form found. Exiting.\" ) return print ( form_data ) retured_form_id = client . execute ( initial_form_creation_query , variable_values = { 'title' : form_data [ 'name' ], 'description' : form_data [ 'description' ]})[ 'insert_Form_one' ][ 'id' ] for question in form_data [ 'questions' ]: if question [ 'type' ] == 'Text' or question [ 'type' ] == 'Short Text' : client . execute ( add_text_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) elif question [ 'type' ] == 'Options' : ques_id = client . execute ( add_options_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) for choice in question [ 'options' ]: client . execute ( add_choices , variable_values = { 'question' : ques_id [ 'insert_ques_options' ][ 'returning' ][ 0 ][ 'id' ], 'title' : choice }) elif question [ 'type' ] == 'Number' : client . execute ( add_number_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) elif question [ 'type' ] == 'Confirm' : client . execute ( add_confirm_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) else : print ( \"[red]Invalid question type.\" ) return print ( \"[green]Form deployed successfully.\" ) print ( \"[green]Form ID: \" + str ( retured_form_id )) return retured_form_id","title":"Deploy a form to the server"},{"location":"FormTools/deploy.html#deploy-a-form-to-the-server","text":"","title":"Deploy a form to the server"},{"location":"FormTools/deploy.html#deploy-function","text":"Returns: Type Description Any None if unsuccessful, else the form id Source code in formee/formTools/deploy.py def deploy () -> Any : \"\"\" Returns: Any: None if unsuccessful, else the form id \"\"\" form_data = read_form () if form_data is None : print ( \"[red]No form found. Exiting.\" ) return print ( form_data ) retured_form_id = client . execute ( initial_form_creation_query , variable_values = { 'title' : form_data [ 'name' ], 'description' : form_data [ 'description' ]})[ 'insert_Form_one' ][ 'id' ] for question in form_data [ 'questions' ]: if question [ 'type' ] == 'Text' or question [ 'type' ] == 'Short Text' : client . execute ( add_text_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) elif question [ 'type' ] == 'Options' : ques_id = client . execute ( add_options_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) for choice in question [ 'options' ]: client . execute ( add_choices , variable_values = { 'question' : ques_id [ 'insert_ques_options' ][ 'returning' ][ 0 ][ 'id' ], 'title' : choice }) elif question [ 'type' ] == 'Number' : client . execute ( add_number_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) elif question [ 'type' ] == 'Confirm' : client . execute ( add_confirm_ques , variable_values = { 'form' : retured_form_id , 'title' : question [ 'question' ]}) else : print ( \"[red]Invalid question type.\" ) return print ( \"[green]Form deployed successfully.\" ) print ( \"[green]Form ID: \" + str ( retured_form_id )) return retured_form_id","title":"Deploy function"},{"location":"FormTools/fill.html","text":"Filling a form \u00b6 Get Form Details \u00b6 Parameters: Name Type Description Default id int ID of the form to be fetched required Returns: Type Description dict Data of the form Source code in formee/formTools/fill.py def get_form_details ( id : int ) -> dict : \"\"\" Args: id (int): ID of the form to be fetched Returns: dict: Data of the form \"\"\" return client . execute ( get_form_details_query , variable_values = { \"id\" : id })[ 'Form_by_pk' ] Form filling prompt \u00b6 Returns: Type Description dict Data of the form Source code in formee/formTools/fill.py def fill_prompt () -> dict : \"\"\" Returns: dict: Data of the form \"\"\" questions = [ { 'type' : 'input' , 'name' : 'form_id' , 'message' : 'Enter the form id:' , 'validate' : lambda val : val != '' }, ] answers = prompt ( questions ) form_details = get_form_details ( answers [ 'form_id' ]) if not form_details : print ( f \"[red]Form with id { answers [ 'form_id' ] } not found.\" ) fill_prompt () print ( \" \\n \" ) print ( f \"[blue] Filling form { form_details [ 'title' ] } \" ) print ( f \"[yellow] Created by { form_details [ 'User' ][ 'username' ] } \" ) print ( f \"[green] Description: { form_details [ 'description' ] } \" ) ques_answers = {} for ques in form_details [ 'ques_texts' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'input' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'validate' : lambda val : val != '' and len ( val ) <= 1000 }])[ ques [ 'title' ]] for ques in form_details [ 'ques_numbers' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'input' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'validate' : NumberValidator }])[ ques [ 'title' ]] for ques in form_details [ 'ques_options' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'list' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'choices' : [ opt [ 'title' ] for opt in ques [ 'options' ]] }])[ ques [ 'title' ]] for ques in form_details [ 'ques_confirms' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'confirm' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ] }])[ ques [ 'title' ]] print ( \" \\n \" ) usr_data = check_login () if usr_data is None : usrname = 'Anonymous' else : usrname = usr_data [ 'username' ] answer_return = client . execute ( answer_mutation , variable_values = { \"data\" : json . dumps ( ques_answers ), \"form\" : form_details [ 'id' ], \"filled_by\" : usrname , \"form_creator\" : form_details [ 'User' ][ 'username' ]})[ 'insert_answers_one' ] print ( f \"[green] Form filled successfully.\" ) print ( f \"[green] Response id: { answer_return [ 'id' ] } \" ) print ( f \"[green] Filled by: { answer_return [ 'filled_by' ] } \" ) print ( f \"[green] Form creator: { answer_return [ 'form_creator' ] } \" ) print ( f \"[green] Form id: { answer_return [ 'form' ] } \" ) return answer_return","title":"Filling a form"},{"location":"FormTools/fill.html#filling-a-form","text":"","title":"Filling a form"},{"location":"FormTools/fill.html#get-form-details","text":"Parameters: Name Type Description Default id int ID of the form to be fetched required Returns: Type Description dict Data of the form Source code in formee/formTools/fill.py def get_form_details ( id : int ) -> dict : \"\"\" Args: id (int): ID of the form to be fetched Returns: dict: Data of the form \"\"\" return client . execute ( get_form_details_query , variable_values = { \"id\" : id })[ 'Form_by_pk' ]","title":"Get Form Details"},{"location":"FormTools/fill.html#form-filling-prompt","text":"Returns: Type Description dict Data of the form Source code in formee/formTools/fill.py def fill_prompt () -> dict : \"\"\" Returns: dict: Data of the form \"\"\" questions = [ { 'type' : 'input' , 'name' : 'form_id' , 'message' : 'Enter the form id:' , 'validate' : lambda val : val != '' }, ] answers = prompt ( questions ) form_details = get_form_details ( answers [ 'form_id' ]) if not form_details : print ( f \"[red]Form with id { answers [ 'form_id' ] } not found.\" ) fill_prompt () print ( \" \\n \" ) print ( f \"[blue] Filling form { form_details [ 'title' ] } \" ) print ( f \"[yellow] Created by { form_details [ 'User' ][ 'username' ] } \" ) print ( f \"[green] Description: { form_details [ 'description' ] } \" ) ques_answers = {} for ques in form_details [ 'ques_texts' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'input' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'validate' : lambda val : val != '' and len ( val ) <= 1000 }])[ ques [ 'title' ]] for ques in form_details [ 'ques_numbers' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'input' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'validate' : NumberValidator }])[ ques [ 'title' ]] for ques in form_details [ 'ques_options' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'list' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ], 'choices' : [ opt [ 'title' ] for opt in ques [ 'options' ]] }])[ ques [ 'title' ]] for ques in form_details [ 'ques_confirms' ]: ques_answers [ ques [ 'title' ]] = prompt ([{ 'type' : 'confirm' , 'name' : ques [ 'title' ], 'message' : ques [ 'title' ] }])[ ques [ 'title' ]] print ( \" \\n \" ) usr_data = check_login () if usr_data is None : usrname = 'Anonymous' else : usrname = usr_data [ 'username' ] answer_return = client . execute ( answer_mutation , variable_values = { \"data\" : json . dumps ( ques_answers ), \"form\" : form_details [ 'id' ], \"filled_by\" : usrname , \"form_creator\" : form_details [ 'User' ][ 'username' ]})[ 'insert_answers_one' ] print ( f \"[green] Form filled successfully.\" ) print ( f \"[green] Response id: { answer_return [ 'id' ] } \" ) print ( f \"[green] Filled by: { answer_return [ 'filled_by' ] } \" ) print ( f \"[green] Form creator: { answer_return [ 'form_creator' ] } \" ) print ( f \"[green] Form id: { answer_return [ 'form' ] } \" ) return answer_return","title":"Form filling prompt"},{"location":"FormTools/getResponses.html","text":"Get Responses for a form \u00b6 Get Responses \u00b6 Source code in formee/formTools/responses.py def get_responses () -> None : user_data = check_login () if not user_data : print ( \"[red]You must be logged in to view responses.\" ) return transport = AIOHTTPTransport ( url = \"https://hrbt-portal.hasura.app/v1/graphql\" , headers = { 'Authorization' : 'Bearer ' + get_user_jwt ()}) # Create a GraphQL client using the defined transport client = Client ( transport = transport , fetch_schema_from_transport = True ) form_id = prompt ([{ 'type' : 'input' , 'name' : 'form_id' , 'message' : 'Enter the form id:' , 'validate' : lambda val : val != '' }])[ 'form_id' ] form_details = get_form_details ( form_id ) if not form_details : print ( f \"[red]Form with id { form_id } not found.\" ) get_responses () if user_data [ 'username' ] == form_details [ 'User' ][ 'username' ]: print ( f \"[green]Loading response to { form_details [ 'title' ] } \" ) form_responses = client . execute ( get_answers_query , variable_values = { '_eq' : form_id })[ 'answers' ] mode_of_display = prompt ([{ 'type' : 'list' , 'name' : 'mode' , 'message' : 'Select the mode of display:' , 'choices' : [ 'Table' , 'JSON' , 'Write to JSON file' , 'Write to YAML file' , 'Cancel' ] }])[ 'mode' ] if mode_of_display == 'Table' : table = Table ( title = f \" { form_details [ 'title' ] } \" ) table . add_column ( 'ID' , style = 'green' ) table . add_column ( 'Filled By' , style = 'green' ) table . add_column ( 'Form' , style = 'green' ) table . add_column ( 'Form Creator' , style = 'green' ) table . add_column ( 'Data' , style = 'green' ) for response in form_responses : table . add_row ( str ( response [ 'id' ]), response [ 'filled_by' ], str ( response [ 'form' ]), response [ 'form_creator' ], str ( response [ 'data' ])) print ( table ) elif mode_of_display == 'JSON' : print ( json . dumps ( form_responses , indent = 4 )) elif mode_of_display == 'Write to JSON file' : file_name = prompt ([{ 'type' : 'input' , 'name' : 'file_name' , 'message' : 'Enter the file name:' , 'validate' : lambda val : val != '' }])[ 'file_name' ] with open ( file_name , 'w' ) as file : file . write ( json . dumps ( form_responses , indent = 4 )) print ( f \"[green]Successfully wrote to { file_name } \" ) elif mode_of_display == 'Write to YAML file' : file_name = prompt ([{ 'type' : 'input' , 'name' : 'file_name' , 'message' : 'Enter the file name:' , 'validate' : lambda val : val != '' }])[ 'file_name' ] with open ( file_name , 'w' ) as file : file . write ( yaml . dump ( form_responses , default_flow_style = False )) print ( f \"[green]Successfully wrote to { file_name } \" ) else : print ( \"[red]Cancelled.\" ) else : print ( f \"[red]You can only view responses to your own forms.\" ) get_responses () return","title":"Get Responses for a form"},{"location":"FormTools/getResponses.html#get-responses-for-a-form","text":"","title":"Get Responses for a form"},{"location":"FormTools/getResponses.html#get-responses","text":"Source code in formee/formTools/responses.py def get_responses () -> None : user_data = check_login () if not user_data : print ( \"[red]You must be logged in to view responses.\" ) return transport = AIOHTTPTransport ( url = \"https://hrbt-portal.hasura.app/v1/graphql\" , headers = { 'Authorization' : 'Bearer ' + get_user_jwt ()}) # Create a GraphQL client using the defined transport client = Client ( transport = transport , fetch_schema_from_transport = True ) form_id = prompt ([{ 'type' : 'input' , 'name' : 'form_id' , 'message' : 'Enter the form id:' , 'validate' : lambda val : val != '' }])[ 'form_id' ] form_details = get_form_details ( form_id ) if not form_details : print ( f \"[red]Form with id { form_id } not found.\" ) get_responses () if user_data [ 'username' ] == form_details [ 'User' ][ 'username' ]: print ( f \"[green]Loading response to { form_details [ 'title' ] } \" ) form_responses = client . execute ( get_answers_query , variable_values = { '_eq' : form_id })[ 'answers' ] mode_of_display = prompt ([{ 'type' : 'list' , 'name' : 'mode' , 'message' : 'Select the mode of display:' , 'choices' : [ 'Table' , 'JSON' , 'Write to JSON file' , 'Write to YAML file' , 'Cancel' ] }])[ 'mode' ] if mode_of_display == 'Table' : table = Table ( title = f \" { form_details [ 'title' ] } \" ) table . add_column ( 'ID' , style = 'green' ) table . add_column ( 'Filled By' , style = 'green' ) table . add_column ( 'Form' , style = 'green' ) table . add_column ( 'Form Creator' , style = 'green' ) table . add_column ( 'Data' , style = 'green' ) for response in form_responses : table . add_row ( str ( response [ 'id' ]), response [ 'filled_by' ], str ( response [ 'form' ]), response [ 'form_creator' ], str ( response [ 'data' ])) print ( table ) elif mode_of_display == 'JSON' : print ( json . dumps ( form_responses , indent = 4 )) elif mode_of_display == 'Write to JSON file' : file_name = prompt ([{ 'type' : 'input' , 'name' : 'file_name' , 'message' : 'Enter the file name:' , 'validate' : lambda val : val != '' }])[ 'file_name' ] with open ( file_name , 'w' ) as file : file . write ( json . dumps ( form_responses , indent = 4 )) print ( f \"[green]Successfully wrote to { file_name } \" ) elif mode_of_display == 'Write to YAML file' : file_name = prompt ([{ 'type' : 'input' , 'name' : 'file_name' , 'message' : 'Enter the file name:' , 'validate' : lambda val : val != '' }])[ 'file_name' ] with open ( file_name , 'w' ) as file : file . write ( yaml . dump ( form_responses , default_flow_style = False )) print ( f \"[green]Successfully wrote to { file_name } \" ) else : print ( \"[red]Cancelled.\" ) else : print ( f \"[red]You can only view responses to your own forms.\" ) get_responses () return","title":"Get Responses"},{"location":"FormTools/read.html","text":"Read form from a file \u00b6 Read a form \u00b6 Returns: Type Description dict The data of the form Source code in formee/formTools/read.py def read_form () -> dict : \"\"\" Returns: dict: The data of the form \"\"\" form_path = prompt ([ { 'type' : 'input' , 'name' : 'form_path' , 'message' : 'Enter the path to the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 20 } ]) form = read_form_file ( form_path [ 'form_path' ]) if form == 'Invalid YAML file' : print ( f \"[red]It is not a valid YAML File.\" ) read_form () elif form == 'File not found' : print ( f \"[red]File not found.\" ) read_form () elif form == 'Invalid content in YAML file' : print ( f \"[red]Invalid content in YAML file.\" ) read_form () return form Display form data \u00b6 Source code in formee/formTools/read.py def display_form_data () -> None : form = read_form () print ( f \" \\n [bold]Name: { form [ 'name' ] } \" ) print ( f \"Description: { form [ 'description' ] } \" ) print ( f \"Generated by: { form [ 'gen_detail' ] } \" ) print ( f \" \\n [bold]Questions:\" ) for question in form [ 'questions' ]: print ( f \" \\n [bold]Question: { question [ 'question' ] } \" ) print ( f \"Type: { question [ 'type' ] } \" ) if question [ 'type' ] == 'Options' : print ( f \"Options: { question [ 'options' ] } \" ) print ( f \"Required: { question [ 'required' ] } \" ) Read form from file \u00b6 Parameters: Name Type Description Default form_path str The path to the form file required Returns: Type Description dict The data of the form Source code in formee/formTools/read.py def read_form_file ( form_path : str ) -> dict : \"\"\" Args: form_path (str): The path to the form file Returns: dict: The data of the form \"\"\" try : form = yaml . safe_load ( open ( form_path , 'r' )) try : form [ 'name' ] form [ 'description' ] form [ 'questions' ] form [ 'gen_detail' ] except KeyError : return 'Invalid content in YAML file' except ParserError : return 'Invalid YAML file' except FileNotFoundError : return 'File not found' return form Try the actual form \u00b6 Source code in formee/formTools/read.py def try_form () -> None : \"\"\" \"\"\" form = read_form () form_data = {} for question in form [ 'questions' ]: if question [ 'type' ] == 'Text' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 100 } ]) elif question [ 'type' ] == 'Short Text' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 20 } ]) elif question [ 'type' ] == 'Number' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : NumberValidator } ]) elif question [ 'type' ] == 'Confirm' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'confirm' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'default' : False } ]) elif question [ 'type' ] == 'Email' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 100 } ]) elif question [ 'type' ] == 'Options' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'list' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'choices' : question [ 'options' ] } ])","title":"Read form from a file"},{"location":"FormTools/read.html#read-form-from-a-file","text":"","title":"Read form from a file"},{"location":"FormTools/read.html#read-a-form","text":"Returns: Type Description dict The data of the form Source code in formee/formTools/read.py def read_form () -> dict : \"\"\" Returns: dict: The data of the form \"\"\" form_path = prompt ([ { 'type' : 'input' , 'name' : 'form_path' , 'message' : 'Enter the path to the form:' , 'validate' : lambda val : val != '' and len ( val ) <= 20 } ]) form = read_form_file ( form_path [ 'form_path' ]) if form == 'Invalid YAML file' : print ( f \"[red]It is not a valid YAML File.\" ) read_form () elif form == 'File not found' : print ( f \"[red]File not found.\" ) read_form () elif form == 'Invalid content in YAML file' : print ( f \"[red]Invalid content in YAML file.\" ) read_form () return form","title":"Read a form"},{"location":"FormTools/read.html#display-form-data","text":"Source code in formee/formTools/read.py def display_form_data () -> None : form = read_form () print ( f \" \\n [bold]Name: { form [ 'name' ] } \" ) print ( f \"Description: { form [ 'description' ] } \" ) print ( f \"Generated by: { form [ 'gen_detail' ] } \" ) print ( f \" \\n [bold]Questions:\" ) for question in form [ 'questions' ]: print ( f \" \\n [bold]Question: { question [ 'question' ] } \" ) print ( f \"Type: { question [ 'type' ] } \" ) if question [ 'type' ] == 'Options' : print ( f \"Options: { question [ 'options' ] } \" ) print ( f \"Required: { question [ 'required' ] } \" )","title":"Display form data"},{"location":"FormTools/read.html#read-form-from-file","text":"Parameters: Name Type Description Default form_path str The path to the form file required Returns: Type Description dict The data of the form Source code in formee/formTools/read.py def read_form_file ( form_path : str ) -> dict : \"\"\" Args: form_path (str): The path to the form file Returns: dict: The data of the form \"\"\" try : form = yaml . safe_load ( open ( form_path , 'r' )) try : form [ 'name' ] form [ 'description' ] form [ 'questions' ] form [ 'gen_detail' ] except KeyError : return 'Invalid content in YAML file' except ParserError : return 'Invalid YAML file' except FileNotFoundError : return 'File not found' return form","title":"Read form from file"},{"location":"FormTools/read.html#try-the-actual-form","text":"Source code in formee/formTools/read.py def try_form () -> None : \"\"\" \"\"\" form = read_form () form_data = {} for question in form [ 'questions' ]: if question [ 'type' ] == 'Text' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 100 } ]) elif question [ 'type' ] == 'Short Text' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 20 } ]) elif question [ 'type' ] == 'Number' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : NumberValidator } ]) elif question [ 'type' ] == 'Confirm' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'confirm' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'default' : False } ]) elif question [ 'type' ] == 'Email' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'input' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'validate' : lambda val : val != '' and len ( val ) <= 100 } ]) elif question [ 'type' ] == 'Options' : form_data [ question [ 'question' ]] = prompt ([ { 'type' : 'list' , 'name' : question [ 'question' ], 'message' : question [ 'question' ], 'choices' : question [ 'options' ] } ])","title":"Try the actual form"}]}